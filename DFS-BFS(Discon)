#include<iostream>
#include<queue>
using namespace std;

void printBFS(int **edge, int v, int sv, bool *visited){
    queue<int> q;
    q.push(sv);

    while(q.size()){
        visited[q.front()]=true;
        cout<<q.front()<<endl;
    for(int i=0;i<v;i++){
        if(i==q.front()){
            continue;
        }
        if(visited[i]==true){
            continue;
        }
        if(edge[q.front()][i]==1){
            q.push(i);
            visited[i]=true;
        }
    }
    q.pop();
    }
}

void printDFS(int** edges, int n, int sv, bool* visited){
    cout<<sv<<endl;
    visited[sv]=true;
    for(int i=0;i<n;i++){
        if(i==sv){
            continue;
        }
        if(edges[sv][i]==1){
            if(visited[i])
                continue;
            printDFS(edges,n,i,visited);
        }
    }
}

void DFS(int **edges,int n){
    bool *visited = new bool[n];
    for(int i=0;i<n;i++){
        visited[i] = false;
    }
    for(int i=0;i<n;i++){
        if(!visited[i]){
            printDFS(edges,n,i,visited);
        }
    }
}

void BFS(int **edges,int n){
    bool *visited = new bool[n];
    for(int i=0;i<n;i++){
        visited[i] = false;
    }
    for(int i=0;i<n;i++){
        if(!visited[i]){
            printBFS(edges,n,i,visited);
        }
    }
}

int main(){
    int n,e;
    cin>>n>>e;
    int **edges = new int*[n];
    for(int i=0;i<n;i++){
        edges[i] = new int[n];
        for(int j=0;j<n;j++)
            edges[i][j]=0;
    }
    for(int i=0;i<e;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }
    cout<<"DFS:"<<endl;
    DFS(edges,n);
    cout<<"BFS:"<<endl;
    BFS(edges,n);
}
