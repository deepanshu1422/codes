#include<iostream>>
using namespace std;

template <typename T>
class QueueUsingArray{
    T *data;
    int size;
    int capacity;
    int nextIndex;
    int firstIndex;

public:
    QueueUsingArray(int totalSize){
        data = new T[totalSize];
        size=0;
        nextIndex=0;
        firstIndex=-1;
        capacity = totalSize;
    }

    T getSize(){
        return size;
    }

    bool isEmpty(){
        return(size==0);
    }

    T front(){
        if(isEmpty()){
           cout<<"Queue Empty."<<endl;
        }
        return data[firstIndex];
    }

    void enqueue(T element){
       /* if(size==capacity){
            cout<<"Size full."<<endl;
            return;
        } */
        if(size==capacity){
            T *newData = new T[2*capacity];
            int j=0;
            for(int i = firstIndex; i< capacity;i++){
                newData[j] = data[i];
                j++;
            }
            for(int k = 0; k<firstIndex;k++){
                newData[j] = data[k];
                j++;
            }
            delete(data);
            data = newData;
            capacity*=2;
            firstIndex=0;
            nextIndex = size;
        }
        data[nextIndex] = element;
        nextIndex=(nextIndex+1)%capacity;
        if(firstIndex==-1)
            firstIndex=0;
        size++;
    }

    T dequeue(){
      if(isEmpty()){
        cout<<"Queue empty"<<endl;
        return 0;
      }
      T ans = data[firstIndex];
      firstIndex = (firstIndex+1)%capacity;
      size--;
      if(size==0){
        firstIndex=-1;
        nextIndex=0;
      }
      return ans;
    }
};

int main(){
    QueueUsingArray<int> q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    q.enqueue(60);

    cout<<q.front()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;

    cout<<q.getSize()<<endl;
    cout<<q.isEmpty()<<endl;
}
