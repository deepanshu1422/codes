#include <iostream>
using namespace std;
#include <vector>

template <typename T>
class TreeNode {
public:
    T data;
    vector<TreeNode<T>*> children;
    
    TreeNode(T data) {
        this->data = data;
    }
    
    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
    
};


#include <queue>

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);
    
    queue<TreeNode<int>*> pendingNodes;
    
    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }
    return root;
}

#include<queue>

TreeNode<int>* maxSumNode(TreeNode<int> *root){
    queue<TreeNode<int>*> pending;
    if(root==NULL)
        return root;
    pending.push(root);
    int ans=0;
    TreeNode<int>* ansNode=root;
    while(pending.size()!=0){
        int roots = pending.front()->data;
        int temp=0;
        for(int i = 0;i<pending.front()->children.size();i++){
            temp+= pending.front()->children[i]->data;
            pending.push(pending.front()->children[i]);
        }
        roots = temp+roots;
        if(roots>ans){
            ans=roots;
            ansNode = pending.front();
        }
        pending.pop();
    }
    return ansNode;
}

int main() {
    TreeNode<int>* root = takeInputLevelWise();
    TreeNode<int>* ans = maxSumNode(root);
    if(ans != NULL) {
        cout << ans -> data << endl;
    }
}
